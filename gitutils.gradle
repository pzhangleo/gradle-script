import java.util.regex.Matcher
import java.util.regex.Pattern

ext.isInJenkins = { ->
    Map<String, String> map = System.getenv()

    if (map == null) {
        return false
    }
    String str = map.get("Path")
    if (str != null) {
        //it's windows
        return false;
    } else {
        str = ""
        Iterator it = map.iterator();
        while (it.hasNext()) {
            str += it.next();
        }
        if (str.contains("jenkins")||str.contains("travis")) {
            return true
        } else {
            return false;
        }
    }
}

/**
 * 获取Jenkins Build 号
 * @return
 */
ext.getJenkinsBuildCode = { ->
    boolean flag = isInJenkins();
    if (flag) {
        ext.env = System.getenv()
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        return "$buildNumber"
    } else {
        return ""
    }
}

/**productflavors
 * 获取Jenkins Build 号
 * @return
 */
ext.getJenkinsBuildType = { ->
    boolean flag = isInJenkins();
    if (flag) {
        ext.env = System.getenv()
        ext.buildtype = env.buildtype?.toString()
        return "$buildtype"
    } else {
        return ""
    }
}

ext.getJenkinsProductFlavors = { ->
    boolean flag = isInJenkins();
    if (flag) {
        ext.env = System.getenv()
        ext.productflavors = env.productflavors?.toString()
        return productflavors != null ? "$productflavors" : ""
    } else {
        return ""
    }
}

ext.getGitCommitHash = { ->
    boolean flag = isInJenkins();
    if (flag) {
        return System.getenv()['GIT_COMMIT'][0..6]
    } else {
        'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    }
}

ext.getGitCommitCount = { ->
    boolean flag = isInJenkins();
    if (flag) {
        ext.env = System.getenv()
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        return buildNumber
    } else {
        return Integer.parseInt('git rev-list HEAD --count'.execute([], project.rootDir).text.trim())
    }
}

ext.getCurrentFlavor = { ->
    ext.gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern;

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}
